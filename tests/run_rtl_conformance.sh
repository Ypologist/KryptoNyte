#!/bin/bash

# Run RISC-V Conformance Tests against RTL Implementation
# This script runs tests for specific extensions against the RTL implementation

set -e

# Signal handling for clean exit
cleanup() {
    echo ""
    echo "üõë Script interrupted. Cleaning up..."
    # Kill any running processes
    pkill -f riscof 2>/dev/null || true
    echo "‚úÖ Cleanup completed"
    exit 1
}

trap cleanup SIGINT SIGTERM

# Parse command line arguments
RUN_I=true
RUN_M=false
RUN_PRIVILEGE=false
SMOKE_TEST=false

# Process command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --with-m)
            RUN_M=true
            shift
            ;;
        --with-privilege)
            RUN_PRIVILEGE=true
            shift
            ;;
        --all)
            RUN_I=true
            RUN_M=true
            RUN_PRIVILEGE=true
            shift
            ;;
        --smoke-test)
            SMOKE_TEST=true
            shift
            ;;
        --help)
            echo "Usage: $0 [options]"
            echo "Options:"
            echo "  --with-m           Include M extension tests (multiply/divide)"
            echo "  --with-privilege   Include privilege tests"
            echo "  --all              Include all test suites"
            echo "  --smoke-test       Run only a single test as a smoke test"
            echo "  --help             Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Set up paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
RISCOF_CONFIG="$SCRIPT_DIR/riscof/config.ini"
REFERENCE_DIR="$SCRIPT_DIR/riscof/reference_signatures"

# Export KRYPTONYTE_ROOT for the plugins to use
export KRYPTONYTE_ROOT="$REPO_ROOT"

# Check if RTL file exists
RTL_PATHS=(
    "$REPO_ROOT/rtl/generators/generated/verilog_hierarchical_timed/ZeroNyteRV32ICore.v"
    "$REPO_ROOT/rtl/ZeroNyte/rv32i/generated/ZeroNyteRV32ICore.v"
    "$REPO_ROOT/rtl/generated/ZeroNyteRV32ICore.v"
)

RTL_FILE=""
for path in "${RTL_PATHS[@]}"; do
    if [ -f "$path" ]; then
        RTL_FILE="$path"
        break
    fi
done

if [ -z "$RTL_FILE" ]; then
    echo "‚ö†Ô∏è  Warning: RTL file not found in expected locations:"
    for path in "${RTL_PATHS[@]}"; do
        echo "  - $path"
    done
    echo "You may need to generate the RTL first with: cd $REPO_ROOT/rtl && sbt genZeroNyte"
fi

# Create test list file based on selected extensions
TEST_LIST="$SCRIPT_DIR/riscof/test_list.yaml"
echo "# RISC-V Conformance Test List" > "$TEST_LIST"
echo "# Generated by run_rtl_conformance.sh" >> "$TEST_LIST"
echo "" >> "$TEST_LIST"

# Start with an empty list
echo "tests:" > "$TEST_LIST"

# Add test suites based on command line arguments
if [ "$RUN_I" = true ]; then
    if [ "$SMOKE_TEST" = true ]; then
        echo "  - test: rv32i_m/I/src/addi-01.S" >> "$TEST_LIST"
    else
        echo "  - test: rv32i_m/I/src/*.S" >> "$TEST_LIST"
    fi
fi

if [ "$RUN_M" = true ]; then
    if [ "$SMOKE_TEST" = true ]; then
        echo "  - test: rv32i_m/M/src/mul-01.S" >> "$TEST_LIST"
    else
        echo "  - test: rv32i_m/M/src/*.S" >> "$TEST_LIST"
    fi
fi

if [ "$RUN_PRIVILEGE" = true ]; then
    if [ "$SMOKE_TEST" = true ]; then
        echo "  - test: rv32i_m/privilege/src/ebreak-01.S" >> "$TEST_LIST"
    else
        echo "  - test: rv32i_m/privilege/src/*.S" >> "$TEST_LIST"
    fi
fi

# Print selected test suites
echo "============================================================"
echo "Running RISC-V Conformance Tests against RTL Implementation"
echo "============================================================"
echo "Selected test suites:"
if [ "$RUN_I" = true ]; then
    echo "  - I (Base Integer Instructions)"
fi
if [ "$RUN_M" = true ]; then
    echo "  - M (Integer Multiplication and Division)"
fi
if [ "$RUN_PRIVILEGE" = true ]; then
    echo "  - Privilege (Privileged Architecture)"
fi
if [ "$SMOKE_TEST" = true ]; then
    echo "Running in smoke test mode (single test per extension)"
fi
echo ""

# Check if reference signatures exist
if [ ! -d "$REFERENCE_DIR" ] || [ -z "$(ls -A "$REFERENCE_DIR" 2>/dev/null)" ]; then
    echo "‚ùå Reference signatures not found at $REFERENCE_DIR"
    echo "Please run ./generate_reference_signatures.sh --all first"
    exit 1
fi

# Check prerequisites
if [ ! -f "$RISCOF_CONFIG" ]; then
    echo "‚ùå RISCOF configuration not found at $RISCOF_CONFIG"
    echo "Please set up RISCOF configuration first"
    exit 1
fi

# Run RISCOF with the selected tests
echo "‚ñ∂ Running RISCOF with selected tests"
echo "  Using test list: $TEST_LIST"
echo "  Using reference signatures from: $REFERENCE_DIR"
echo ""

# Find RISC-V conformance test suite
CONFORMANCE_PATHS=(
    "/opt/riscv-conformance/riscv-arch-test/riscv-test-suite/"
    "/opt/riscv-arch-test/riscv-test-suite/"
    "/usr/local/share/riscv-arch-test/riscv-test-suite/"
)

CONFORMANCE_SUITE=""
for path in "${CONFORMANCE_PATHS[@]}"; do
    if [ -d "$path" ]; then
        CONFORMANCE_SUITE="$path"
        CONFORMANCE_ENV="$(dirname "$path")/riscv-test-suite/env"
        break
    fi
done

if [ -z "$CONFORMANCE_SUITE" ]; then
    echo "‚ùå RISC-V conformance test suite not found in expected locations"
    echo "Please install RISC-V conformance tests or set the correct path"
    exit 1
fi

# Run RISCOF with the selected tests
# Note: We use --use-sig-dir to use pre-generated reference signatures
riscof run \
    --config="$RISCOF_CONFIG" \
    --suite="$CONFORMANCE_SUITE" \
    --env="$CONFORMANCE_ENV" \
    --no-browser \
    --testfile="$TEST_LIST" \
    --use-sig-dir="$REFERENCE_DIR/src"

echo "‚úÖ RISCOF tests completed"
